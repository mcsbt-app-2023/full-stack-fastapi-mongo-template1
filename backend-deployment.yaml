apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\bin\kompose.exe convert -f docker-compose.yml
    kompose.version: 1.34.0 (cbf2835db)
    traefik.constraint-label: traefik-public
    traefik.docker.network: traefik-public
    traefik.enable: "true"
    traefik.middleware.www-redirect.regex: ^http(s)?://www.(localhost)/(.*)
    traefik.middleware.www-redirect.replacement: http${1}://localhost/${3}
    traefik.router.backend-http.entrypoints: http
    traefik.router.backend-http.middlewares: https-redirect,www-redirect
    traefik.router.backend-http.rule: Host(`localhost`, `www.localhost`) && PathPrefix(`/api`, `/docs`, `/redoc`)
    traefik.router.backend-https.entrypoints: https
    traefik.router.backend-https.middlewares: www-redirect
    traefik.router.backend-https.rule: Host(`localhost`, `www.localhost`) && PathPrefix(`/api`, `/docs`, `/redoc`)
    traefik.router.backend-https.tls: "true"
    traefik.router.backend-https.tls.certresolver: le
    traefik.service.backend.port: "80"
  labels:
    io.kompose.service: backend
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: backend
  template:
    metadata:
      annotations:
        kompose.cmd: C:\bin\kompose.exe convert -f docker-compose.yml
        kompose.version: 1.34.0 (cbf2835db)
        traefik.constraint-label: traefik-public
        traefik.docker.network: traefik-public
        traefik.enable: "true"
        traefik.middleware.www-redirect.regex: ^http(s)?://www.(localhost)/(.*)
        traefik.middleware.www-redirect.replacement: http${1}://localhost/${3}
        traefik.router.backend-http.entrypoints: http
        traefik.router.backend-http.middlewares: https-redirect,www-redirect
        traefik.router.backend-http.rule: Host(`localhost`, `www.localhost`) && PathPrefix(`/api`, `/docs`, `/redoc`)
        traefik.router.backend-https.entrypoints: https
        traefik.router.backend-https.middlewares: www-redirect
        traefik.router.backend-https.rule: Host(`localhost`, `www.localhost`) && PathPrefix(`/api`, `/docs`, `/redoc`)
        traefik.router.backend-https.tls: "true"
        traefik.router.backend-https.tls.certresolver: le
        traefik.service.backend.port: "80"
      labels:
        io.kompose.service: backend
    spec:
      containers:
        - env:
            - name: ACCESS_TOKEN_EXPIRE_MINUTES
              valueFrom:
                configMapKeyRef:
                  key: ACCESS_TOKEN_EXPIRE_MINUTES
                  name: env
            - name: ALGORITHM
              valueFrom:
                configMapKeyRef:
                  key: ALGORITHM
                  name: env
            - name: BACKEND_CORS_ORIGINS
              valueFrom:
                configMapKeyRef:
                  key: BACKEND_CORS_ORIGINS
                  name: env
            - name: DOCKER_IMAGE_BACKEND
              valueFrom:
                configMapKeyRef:
                  key: DOCKER_IMAGE_BACKEND
                  name: env
            - name: DOCKER_IMAGE_FRONTEND
              valueFrom:
                configMapKeyRef:
                  key: DOCKER_IMAGE_FRONTEND
                  name: env
            - name: DOMAIN
              valueFrom:
                configMapKeyRef:
                  key: DOMAIN
                  name: env
            - name: EMAILS_FROM_EMAIL
              valueFrom:
                configMapKeyRef:
                  key: EMAILS_FROM_EMAIL
                  name: env
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  key: ENVIRONMENT
                  name: env
            - name: FIRST_SUPERUSER
              valueFrom:
                configMapKeyRef:
                  key: FIRST_SUPERUSER
                  name: env
            - name: FIRST_SUPERUSER_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: FIRST_SUPERUSER_PASSWORD
                  name: env
            - name: MONGODB_DB
              valueFrom:
                configMapKeyRef:
                  key: MONGODB_DB
                  name: env
            - name: MONGODB_URI
              valueFrom:
                configMapKeyRef:
                  key: MONGODB_URI
                  name: env
            - name: PROJECT_NAME
              valueFrom:
                configMapKeyRef:
                  key: PROJECT_NAME
                  name: env
            - name: SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  key: SECRET_KEY
                  name: env
            - name: SENTRY_DSN
              valueFrom:
                configMapKeyRef:
                  key: SENTRY_DSN
                  name: env
            - name: SMTP_HOST
              valueFrom:
                configMapKeyRef:
                  key: SMTP_HOST
                  name: env
            - name: SMTP_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: SMTP_PASSWORD
                  name: env
            - name: SMTP_PORT
              valueFrom:
                configMapKeyRef:
                  key: SMTP_PORT
                  name: env
            - name: SMTP_SSL
              valueFrom:
                configMapKeyRef:
                  key: SMTP_SSL
                  name: env
            - name: SMTP_TLS
              valueFrom:
                configMapKeyRef:
                  key: SMTP_TLS
                  name: env
            - name: SMTP_USER
              valueFrom:
                configMapKeyRef:
                  key: SMTP_USER
                  name: env
            - name: STACK_NAME
              valueFrom:
                configMapKeyRef:
                  key: STACK_NAME
                  name: env
            - name: USERS_OPEN_REGISTRATION
              valueFrom:
                configMapKeyRef:
                  key: USERS_OPEN_REGISTRATION
                  name: env
          image: backend:latest
          name: backend
      restartPolicy: Always
